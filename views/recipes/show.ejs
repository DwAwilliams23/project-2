<%- include('../partials/header') %>
<div id="recipe-div">
  <div id="show-ed-de-div">
    <div id="show-page">
      <div>Cuisine: </div>
      <div>
        <% if (recipe.cuisine) { %>
          <%= recipe.cuisine.name %>
        <% } %>
      </div>
      <div>Type of Dish: </div>
      <div><%= recipe.dishType %></div>
      <div>Servings: </div>
      <div><%= recipe.serving %></div>
      <div>Prep Time: </div>
      <div><%= recipe.formattedPrepTime %></div>
      <div>Cook Time: </div>
      <div><%= recipe.formattedCookTime %></div>
      <div>Total Time: </div>
      <div><%= recipe.totalTime %></div>
      <div>Have made before: </div>
      <div><%= recipe.haveMade ? 'Yes' : 'No' %></div>
    </div>
    <% if(user) { %>
      <div id="ed-de-div">
        <div class="edit-button">
          <button id="editOriginalButton" onclick="replaceAndToggleEditButtons()" id="toggleEditButtons">
            <img src="/images/edit-icon.png" alt="Edit Icon" class="ed-de-icon"/>
          </button>
        </div>
        <div id="editNewButtons" class="hidden">
          <div id="confcanc-buttons">
            <button onclick="restoreAndToggleEditButton()">
              <img src="/images/edit-icon.png" alt="Edit Icon" class="ed-de-icon"/>
            </button>
            <a href="/recipes/<%= recipe._id %>/edit">
              <button type="submit">
                <img src="/images/check.png" alt="Check Icon" class="ed-de-icon" id="check-button"/>
              </button>
            </a>
          </div>
        </div>
        <div class="trash-button">
          <button id="deleteOriginalButton" onclick="replaceDeleteButtons()">
            <img src="/images/trash-icon.png" alt="Trash Icon" class="ed-de-icon">
          </button>
        </div>
        <div id="deleteNewButtons" class="hidden">
          <div id="confcanc-buttons">
            <button onclick="restoreDeleteButton()">
              <img src="/images/close.png" alt="Close Icon" class="ed-de-icon" id="close-button">
            </button>
            <form action="/recipes/<%= recipe._id %>?_method=DELETE" method="POST">
              <button type="submit">
                <img src="/images/check.png" alt="Check Icon" class="ed-de-icon" id="check-button"/>
              </button>
            </form>
          </div>
        </div>
      </div>
    <% } %>
  </div>

  <% if (recipe.equipments.length) { %>
    <div class="equipment-list">
      <h2>Equipment</h2>
        <ul>
          <% let total = 0 %>
          <% recipe.equipments.forEach(function(equipment) { %>
                <li class="equipment-li">
                  <%= equipment.content %>
                </li>
                <div>
                  <% if (user?._id.equals(equipment.user)) { %>
                    <button class="list-edit-button">
                      <a href="recipes/equipments/<%= equipment._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(equipment.user)) { %>
                    <form action="/recipes/<%= recipe._id %>/equipments/<%= equipment._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                  </form>
                  <% } %>
                </div>
          <% }); %>
        </ul>
    </div>
  <% } %>

  <% if(user) { %>
    <div class="input-div">
      <form id="add-equipment-form" method="POST"
        action="/recipes/<%= recipe._id %>/equipments">
        <input id="content-form-equipment" name="content" placeholder="Equipment item name (e.g., blender, pastry cutter)"></input>
        <input type="submit" value="Add equipment item" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="content-error-equipment"></span>
      </div>
      <div class="group-divider"></div>
    </div>
  <% } %>

  <% if (recipe.ingredients.length || recipe.ingredientGroups.length) { %>
    <div class="instruction-list">
      <h2>Ingredients</h2>
      <div id="ingredients-adjuster">
        <div>Servings</div>
        <div>
          <button id="decrease-servings" onclick="adjustServings(-1)">-</button>
          <input type="number" id="servings-input" value="<%= recipe.serving %>" data-original-servings="<%= recipe.serving %>">
          <button id="increase-servings" onclick="adjustServings(1)">+</button>
        </div>
        <div>Display</div>
        <select id="display-mode" onchange="updateIngredientQuantities()">
          <option value="original">Original</option>
          <option value="fraction">Fraction</option>
          <option value="decimal">Decimal</option>
        </select>
      </div>
      <ul>
        <% let total = 0 %>
        <% recipe.ingredients.forEach(function(ingredient) { %>
          <li class="ingredient-li">
            <span class="ingredient-quantity" data-original-quantity="<%= ingredient.quantity %>"><%= ingredient.quantity %></span>
            <%= ingredient.measurement %>
            <%= ingredient.content %>
          </li>
          <div>
            <% if (user?._id.equals(ingredient.user)) { %>
              <button class="list-edit-button">
                <a href="/recipes/<%= recipe._id %>/ingredients/<%= ingredient._id %>/edit">
                  Edit
                </a>
              </button>
            <% } %>
          </div>
          <div>
            <% if (user?._id.equals(ingredient.user)) { %>
              <form action="/recipes/<%= recipe._id %>/ingredients/<%= ingredient._id %>?_method=DELETE" method="POST" class="x-form">
                <button class="x-button" type="submit">X</button>
              </form>
            <% } %>
          </div>
        <% }); %>
      </ul>
    </div>
  <% } %>
  
  <% if(user) { %>
    <div class="input-div">
      <form id="add-ingredient-form" method="POST"
        action="/recipes/<%= recipe._id %>/ingredients">
        <input  name="quantity" id="quantity-form-ingredient" placeholder="Qty."></input>
        <select name="measurement" id="measurement-form">
          <option value="">Measurement</option>
          <option value="Pinch">Pinch</option>
          <option value="Dash">Dash</option>
          <option value="Teaspoon">Teaspoon</option>
          <option value="Tablespoon">Tablespoon</option>
          <option value="Ounce">Ounce</option>
          <option value="Pound">Pound</option>
          <option value="Fluid Ounce">Fluid Ounce</option>
          <option value="Cup">Cup</option>
          <option value="Pint">Pint</option>
          <option value="Quart">Quart</option>
          <option value="Gallon">Gallon</option>
        </select>
        <input  name="content" id="content-form-ingredient" placeholder="Ingredient name (e.g., flour, salt, eggs)"></input>
        <input type="submit" value="Add ingredient" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="quantity-error-ingredient"></span>
        <span class="error-message" id="content-error-ingredient"></span>
      </div>
      <div class="group-divider"></div>
    </div>
  <% } %>

  <% if (user) { %>
    <div class="input-div">
      <form id="add-ingredient-group-form" method="POST" action="/recipes/<%= recipe._id %>/ingredientGroups">
        <input id="name-form-ingredient-group" name="name" placeholder="Group name (e.g., Dry Ingredients, For the Topping)"></input>
        <input type="submit" value="Add ingredient group" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="name-error-ingredient-group"></span>
      </div>
    </div>
  <% } %>

  <% if (recipe.ingredientGroups.length) { %>
    <div class="instruction-list">
      <div id="group-container">
        <% let total = 0 %>
        <% recipe.ingredientGroups.forEach(function(ingredientGroup) { %>
          <div class="group-list">
            <div class="group-li">
              <h3 class="ingredient-group-name"><%= ingredientGroup.name %></h3>
              <div class="group-edit">
                <% if (user?._id.equals(ingredientGroup.user)) { %>
                  <button class="list-edit-button">
                    <a href="recipes/ingredientGroups/<%= ingredientGroup._id %>/edit">
                      Edit
                    </a>
                  </button>
                <% } %>
              </div>
              <div class="group-delete">
                <% if (user?._id.equals(ingredientGroup.user)) { %>
                  <form action="/ingredientGroups/<%= ingredientGroup._id %>?_method=DELETE" method="POST" class="x-form">
                    <button class="x-button" type="submit">X</button>
                  </form>
                <% } %>
              </div>
            </div>
            <ul>
              <% ingredientGroup.ingredients.forEach(function(ingredient) { %>
                <li class="ingredient-li">
                  <span class="ingredient-quantity" data-original-quantity="<%= ingredient.quantity %>"><%= ingredient.quantity %></span>
                  <%= ingredient.measurement %>
                  <%= ingredient.content %>
                </li>
                <div>
                  <% if (user?._id.equals(ingredient.user)) { %>
                    <button class="list-edit-button">
                      <a href="/recipes/<%= recipe._id %>/ingredientGroups/<%= ingredientGroup._id %>/ingredients/<%= ingredient._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(ingredient.user)) { %>
                    <form action="/recipes/<%= recipe._id %>/ingredientGroups/<%= ingredientGroup._id %>/ingredients/<%= ingredient._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                    </form>
                  <% } %>
                </div>
              <% }); %>
            </ul>
            <% if (user) { %>
              <div class="input-div">
                <form class="add-group-ingredient-form" id="add-group-ingredient-form-<%= ingredientGroup._id %>" method="POST"
                  action="/recipes/<%= recipe._id %>/ingredientGroups/<%= ingredientGroup._id %>/ingredients" onsubmit="return validateGroupIngredientForm('<%= ingredientGroup._id %>')">
                  <input name="quantity" id="quantity-form-group-ingredient-<%= ingredientGroup._id %>" class="quantity-form-group-ingredient" placeholder="Qty."></input>
                  <select name="measurement" id="measurement-form">
                    <option value="">Measurement</option>
                    <option value="Pinch">Pinch</option>
                    <option value="Dash">Dash</option>
                    <option value="Teaspoon">Teaspoon</option>
                    <option value="Tablespoon">Tablespoon</option>
                    <option value="Ounce">Ounce</option>
                    <option value="Pound">Pound</option>
                    <option value="Fluid Ounce">Fluid Ounce</option>
                    <option value="Cup">Cup</option>
                    <option value="Pint">Pint</option>
                    <option value="Quart">Quart</option>
                    <option value="Gallon">Gallon</option>
                  </select>
                  <input name="content" id="content-form-group-ingredient-<%= ingredientGroup._id %>" class="content-form-group-ingredient" placeholder="Ingredient name (e.g., flour, salt, eggs)"></input>
                  <input type="submit" value="Add ingredient to group" data-processing="false">
                </form>
                <div class="error-message-container">
                  <span class="error-message" id="quantity-error-group-ingredient-<%= ingredientGroup._id %>"></span>
                  <span class="error-message" id="content-error-group-ingredient-<%= ingredientGroup._id %>"></span>
                </div>
                <div class="group-divider"></div>
              </div>
            <% } %>
          </div>
        <% }); %>
      </div>
    </div>
  <% } %>
  
  <% if (recipe.steps.length || recipe.stepGroups.length) { %>
    <div class="instruction-list">
      <h2>Instructions</h2>
        <ol>
          <% let total = 0 %>
          <% recipe.steps.forEach(function(step) { %>
                <li class="step-li">
                  <%= step.content %>
                </li>
                <div>
                  <% if (user?._id.equals(step.user)) { %>
                    <button class="list-edit-button">
                      <a href="recipes/steps/<%= step._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(step.user)) { %>
                    <form action="/steps/<%= step._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                    </form>
                  <% } %>
                </div>
          <% }); %>
        </ol>
    </div>
  <% } %>
  
  <% if(user) { %>
    <div class="input-div">
      <form id="add-step-form" method="POST"
        action="/recipes/<%= recipe._id %>/steps">
        <textarea id="content-form-step" name="content" placeholder="Add step (e.g., Mix flour and sugar together until well combined.)"></textarea>
        <input type="submit" value="Add step" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="content-error-step"></span>
      </div>
      <div class="group-divider"></div>
    </div>
  <% } %>

  <% if (user) { %>
    <div class="input-div">
      <form id="add-step-group-form" method="POST" action="/recipes/<%= recipe._id %>/stepGroups">
        <input id="name-form-step-group" name="name" placeholder="Group name (e.g., For the Sauce, Final Assembly)"></input>
        <input type="submit" value="Add instruction group" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="name-error-step-group"></span>
      </div>
    </div>
  <% } %>

  <% if (recipe.stepGroups.length) { %>
    <div class="instruction-list">
      <div id="group-container">
        <% let total = 0 %>
        <% recipe.stepGroups.forEach(function(stepGroup) { %>
          <div class="group-list">
            <div class="group-li">
              <h3 class="step-group-name"><%= stepGroup.name %></h3>
              <div class="group-edit">
                <% if (user?._id.equals(stepGroup.user)) { %>
                  <button class="list-edit-button">
                    <a href="/recipes/<%= recipe._id %>/stepGroups/<%= stepGroup._id %>/edit">
                      Edit
                    </a>
                  </button>
                <% } %>
              </div>
              <div class="group-delete">
                <% if (user?._id.equals(stepGroup.user)) { %>
                  <form action="/stepGroups/<%= stepGroup._id %>?_method=DELETE" method="POST" class="x-form">
                    <button class="x-button" type="submit">X</button>
                  </form>
                <% } %>
              </div>
            </div>
            <ol>
              <% stepGroup.steps.forEach(function(step) { %>
                <li class="step-li">
                  <%= step.content %>
                </li>
                <div>
                  <% if (user?._id.equals(step.user)) { %>
                    <button class="list-edit-button">
                      <a href="/recipes/<%= recipe._id %>/stepGroups/<%= stepGroup._id %>/steps/<%= step._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(step.user)) { %>
                    <form action="/recipes/<%= recipe._id %>/stepGroups/<%= stepGroup._id %>/steps/<%= step._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                    </form>
                  <% } %>
                </div>
              <% }); %>
            </ol>
            <% if (user) { %>
              <div class="input-div">
                <form class="add-group-step-form" id="add-group-step-form-<%= stepGroup._id %>" method="POST" action="/recipes/<%= recipe._id %>/stepGroups/<%= stepGroup._id %>/steps">
                  <textarea id="content-form-group-step-<%= stepGroup._id %>" name="content" class="content-form-group-step" placeholder="Add step (e.g., Mix flour and sugar together until well combined.)"></textarea>
                  <input type="submit" value="Add step to group" data-processing="false">
                </form>
                <div class="error-message-container">
                  <span class="error-message" id="content-error-group-step-<%= stepGroup._id %>"></span>
                </div>
                <div class="group-divider"></div>
              </div>
            <% } %>
          </div>
        <% }); %>
      </div>
    </div>
  <% } %>

  <% if (recipe.notes.length) { %>
    <div class="note-list">
      <h2>Notes</h2>
        <ul>
          <% let total = 0 %>
          <% recipe.notes.forEach(function(note) { %>
                <li class="note-li">
                  <%= note.content %>
                </li>
                <div>
                  <% if (user?._id.equals(note.user)) { %>
                    <button class="list-edit-button">
                      <a href="recipes/notes/<%= note._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(note.user)) { %>
                    <form action="/recipes/<%= recipe._id %>/notes/<%= note._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                  </form>
                  <% } %>
                </div>
          <% }); %>
        </ul>
    </div>
  <% } %>

  <% if(user) { %>
    <div class="input-div">
      <form id="add-note-form" method="POST"
        action="/recipes/<%= recipe._id %>/notes">
        <textarea id="content-form-note" name="content" placeholder="Add note (Any additional tips or variations for this recipe)"></textarea>
        <input type="submit" value="Add note" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="content-error-note"></span>
      </div>
      <div class="group-divider"></div>
    </div>
  <% } %>

  <% if (recipe.storages.length) { %>
    <div class="storage-list">
      <h2>Storage</h2>
        <ul>
          <% let total = 0 %>
          <% recipe.storages.forEach(function(storage) { %>
                <li class="storage-li">
                  <%= storage.content %>
                </li>
                <div>
                  <% if (user?._id.equals(storage.user)) { %>
                    <button class="list-edit-button">
                      <a href="recipes/storages/<%= storage._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(storage.user)) { %>
                    <form action="/recipes/<%= recipe._id %>/storages/<%= storage._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                  </form>
                  <% } %>
                </div>
          <% }); %>
        </ul>
    </div>
  <% } %>

  <% if(user) { %>
    <div class="input-div">
      <form id="add-storage-form" method="POST"
        action="/recipes/<%= recipe._id %>/storages">
        <textarea id="content-form-storage" name="content" placeholder="Add storage info (e.g., Store in an airtight container at room temperature for up to 3 days.)"></textarea>
        <input type="submit" value="Add storage info" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="content-error-storage"></span>
      </div>
      <div class="group-divider"></div>
    </div>
  <% } %>

  <% if (recipe.freezers.length) { %>
    <div class="freezer-list">
      <h2>Freezing</h2>
        <ul>
          <% let total = 0 %>
          <% recipe.freezers.forEach(function(freezer) { %>
                <li class="freezer-li">
                  <%= freezer.content %>
                </li>
                <div>
                  <% if (user?._id.equals(freezer.user)) { %>
                    <button class="list-edit-button">
                      <a href="recipes/freezers/<%= freezer._id %>/edit">
                        Edit
                      </a>
                    </button>
                  <% } %>
                </div>
                <div>
                  <% if (user?._id.equals(freezer.user)) { %>
                    <form action="/recipes/<%= recipe._id %>/freezers/<%= freezer._id %>?_method=DELETE" method="POST" class="x-form">
                      <button class="x-button" type="submit">X</button>
                  </form>
                  <% } %>
                </div>
          <% }); %>
        </ul>
    </div>
  <% } %>

  <% if(user) { %>
    <div class="input-div">
      <form id="add-freezer-form" method="POST"
        action="/recipes/<%= recipe._id %>/freezers">
        <textarea id="content-form-freezer" name="content" placeholder="Add freezing info (e.g., Freeze in a sealed container for up to 1 month. Thaw overnight in the refrigerator before serving.)"></textarea>
        <input type="submit" value="Add freezing info" data-processing="false">
      </form>
      <div class="error-message-container">
        <span class="error-message" id="content-error-freezer"></span>
      </div>
      <div class="group-divider"></div>
    </div>
  <% } %>

</div>

<script>

  function updateIngredientQuantities() {
    const displayMode = document.getElementById("display-mode").value;
    const originalServings = parseInt(document.getElementById("servings-input").getAttribute('data-original-servings'));
    const currentServings = parseInt(document.getElementById("servings-input").value);
    const scalingFactor = currentServings / originalServings;

    const ingredientQuantities = document.querySelectorAll(".ingredient-li .ingredient-quantity");
    ingredientQuantities.forEach(element => {
      const originalQuantity = element.getAttribute("data-original-quantity");
      const parsedQuantity = parseQuantity(originalQuantity);
      const scaledQuantity = parsedQuantity * scalingFactor;

      let newQuantity;
      switch (displayMode) {
        case "fraction":
          newQuantity = convertToFraction(scaledQuantity);
          break;
        case "decimal":
          newQuantity = parseFloat(scaledQuantity.toFixed(2)).toString();
          break;
        default:
          // Calculate the scaled value in its original format (either as a decimal or as a fraction/mixed number)
          if (originalQuantity.includes('/') || originalQuantity.includes(' ')) {
            // If the original was a fraction or mixed number, convert the scaled quantity back to its original format
            newQuantity = convertToFraction(scaledQuantity);
          } else {
            // Otherwise, show as a decimal rounded to two places if necessary
            newQuantity = parseFloat(scaledQuantity.toFixed(2)).toString();
          }
      }
      element.innerHTML = newQuantity;
    });
  }

  function parseQuantity(input) {
    if (!input || isNaN(input)) {
      if (input.includes(' ')) { // Handle mixed numbers
        const [whole, fraction] = input.split(' ');
        const [numerator, denominator] = fraction.split('/');
        return parseInt(whole) + (parseInt(numerator) / parseInt(denominator));
      } else if (input.includes('/')) { // Handle pure fractions
        const [numerator, denominator] = input.split('/');
        return parseInt(numerator) / parseInt(denominator);
      }
    }
    input = input.replace(/\.33(?![\d])/g, ".333").replace(/\.66(?![\d])/g, ".667").replace(/\.67(?![\d])/g, ".667");
    return parseFloat(input); // Handle decimal and whole numbers
  }

  function convertToFraction(decimal) {
    if (decimal === 0) return "0";
    if (decimal > 0 && decimal < 0.035) return "<span class='numerator'>1</span><span class='solidus'>/</span><span class='denominator'>16</span>";

    const gcd = (a, b) => (b ? gcd(b, a % b) : a);
    let bestDiff = Math.abs(decimal);
    let bestNumerator = 1;
    let bestDenominator = 1;

    for (let denominator = 1; denominator <= 16; denominator++) {
        let numerator = Math.round(decimal * denominator);
        let diff = Math.abs(decimal - numerator / denominator);

        if (diff < bestDiff) {
            bestDiff = diff;
            bestNumerator = numerator;
            bestDenominator = denominator;
        }
    }

    let reducedNumerator = bestNumerator;
    let reducedDenominator = bestDenominator;

    const divisor = gcd(reducedNumerator, reducedDenominator);
    reducedNumerator /= divisor;
    reducedDenominator /= divisor;

    if (reducedNumerator === 0) return "0";

    if (decimal < 0) reducedNumerator = -reducedNumerator;

    if (reducedNumerator % reducedDenominator === 0) {
        return (reducedNumerator / reducedDenominator).toString();
    } else if (Math.abs(reducedNumerator) < reducedDenominator) {
        // Pure fraction
        return `<span class="numerator">${Math.abs(reducedNumerator)}</span><span class="solidus">/</span><span class="denominator">${reducedDenominator}</span>`;
    } else {
        // Mixed number
        const whole = Math.floor(reducedNumerator / reducedDenominator);
        reducedNumerator %= reducedDenominator;
        return `${whole} <span class="numerator">${Math.abs(reducedNumerator)}</span><span class="solidus">/</span><span class="denominator">${reducedDenominator}</span>`;
    }
  }

  function adjustServings(change) {
    const servingsInput = document.getElementById("servings-input");
    let newServings = parseInt(servingsInput.value) + change;
    if (newServings < 1) newServings = 1; // Prevent servings from going below 1
    servingsInput.value = newServings;
    updateIngredientQuantities(); // Update quantities with the new servings
  }

  function initializeServingsInput() {
    const servingsInput = document.getElementById("servings-input");

    servingsInput.addEventListener("keydown", function(event) {
        if (event.key === "Enter") {
            event.preventDefault();  // Prevent the form from being submitted if it's part of a form
            adjustServings(0);  // Adjust servings without change, essentially updating the display
        }
    });
  }

  const formElements = document.querySelectorAll("form");
  formElements.forEach((form) => {
    form.addEventListener("submit", (event) => {
      const submitButton = form.querySelector("[type='submit']");
      
      // Dynamically get the validation function based on the form's context
      const validationFunction = getValidationFunction(form);

      if (validationFunction && !validationFunction()) {
        event.preventDefault(); // Prevent the form from being submitted again
      } else {
        submitButton.setAttribute("data-processing", "true"); // Disable the submit button
        submitButton.disabled = true; // Disable the button visually
      }
    });
  });

  // Function to get the appropriate validation function based on the form's context
  function getValidationFunction(form) {
    // Identify the form context based on its elements, IDs, or other attributes
    if (form.id === "add-ingredient-form") {
      return validateIngredientForm;
    } else if (form.id.startsWith("add-group-ingredient-form-")) {
      // Extract the ingredientGroupId from the form's ID
      const ingredientGroupId = form.id.split("-").pop();
      return () => validateGroupIngredientForm(ingredientGroupId);
    } else if (form.id.startsWith("add-group-step-form-")) {
      // Extract the stepGroupId from the form's ID
      const stepGroupId = form.id.split("-").pop();
      return () => validateGroupStepForm(stepGroupId);
    } else if (form.id === "add-ingredient-group-form") {
      return validateIngredientGroupForm;
    } else if (form.id === "add-step-group-form") {
      return validateStepGroupForm;
    } else if (form.id === "add-step-form") {
      return validateStepForm;
    } else if (form.id === "add-storage-form") {
      return validateStorageForm;
    } else if (form.id === "add-equipment-form") {
      return validateEquipmentForm;
    } else if (form.id === "add-note-form") {
      return validateNoteForm;
    } else if (form.id === "add-freezer-form") {
      return validateFreezerForm;
    }

    // Return a default function if the form context is not recognized
    return () => true;
  }

  
  function validateIngredientForm() {
    const quantityField = document.getElementById("quantity-form-ingredient");
    const contentField = document.getElementById("content-form-ingredient");
    const quantityError = document.getElementById("quantity-error-ingredient");
    const contentError = document.getElementById("content-error-ingredient");

    quantityError.textContent = "";
    contentError.textContent = "";

    const quantityValue = quantityField.value.trim();
    const contentValue = contentField.value.trim();

    let isValid = true;

    if (quantityValue === "" || !/^(\d+\s\d+\/\d+|\d+\/\d+|\d*\.\d+|\.\d+|\d+)$/.test(quantityValue)) {
        quantityError.textContent = "Please enter a valid quantity (whole number, fraction, mixed number, or decimal).";
        isValid = false;
    }

    if (contentValue === "") {
      contentError.textContent = "Please enter an ingredient name.";
      isValid = false;
    }

    return isValid;
  }

  function validateGroupIngredientForm(ingredientGroupId) {
    const quantityField = document.getElementById(`quantity-form-group-ingredient-${ingredientGroupId}`);
    const contentField = document.getElementById(`content-form-group-ingredient-${ingredientGroupId}`);
    const quantityError = document.getElementById(`quantity-error-group-ingredient-${ingredientGroupId}`);
    const contentError = document.getElementById(`content-error-group-ingredient-${ingredientGroupId}`);

    // Reset error messages
    quantityError.textContent = "";
    contentError.textContent = "";

    let isValid = true;

    // Extend the quantity validation to include whole numbers, fractions, and mixed numbers
    const quantityValue = quantityField.value.trim();
    if (quantityValue === "" || !/^(\d+\s\d+\/\d+|\d+\/\d+|\d*\.\d+|\.\d+|\d+)$/.test(quantityValue)) {
        quantityError.textContent = "Please enter a valid quantity (whole number, fraction, mixed number, or decimal).";
        isValid = false;
    }

    // Validate content (must not be empty)
    const contentValue = contentField.value.trim();
    if (contentValue === "") {
        contentError.textContent = "Please enter an ingredient name.";
        isValid = false;
    }

    return isValid;
  }

  function validateIngredientGroupForm() {
    const ingredientGroupNameField = document.getElementById("name-form-ingredient-group");
    const ingredientGroupNameError = document.getElementById("name-error-ingredient-group");

    // Reset error message
    ingredientGroupNameError.textContent = "";

    let isValid = true;

    // Validate ingredientGroup name (must not be empty)
    const ingredientGroupNameValue = ingredientGroupNameField.value.trim();
    if (ingredientGroupNameValue === "") {
      ingredientGroupNameError.textContent = "Please enter a group name.";
      isValid = false;
    }

    return isValid;
  }

  function validateGroupStepForm(stepGroupId) {
    const contentField = document.getElementById(`content-form-group-step-${stepGroupId}`);
    const contentError = document.getElementById(`content-error-group-step-${stepGroupId}`);

    // Reset error messages
    contentError.textContent = "";

    let isValid = true;

    // Validate content (must not be empty)
    const contentValue = contentField.value.trim();
    if (contentValue === "") {
      contentError.textContent = "Please enter step content.";
      isValid = false;
    }

    return isValid;
  }

  function validateStepGroupForm() {
    const stepGroupNameField = document.getElementById("name-form-step-group");
    const stepGroupNameError = document.getElementById("name-error-step-group");

    // Reset error message
    stepGroupNameError.textContent = "";

    let isValid = true;

    // Validate stepGroup name (must not be empty)
    const stepGroupNameValue = stepGroupNameField.value.trim();
    if (stepGroupNameValue === "") {
      stepGroupNameError.textContent = "Please enter a group name.";
      isValid = false;
    }

    return isValid;
  }

  function validateStepForm() {
    const stepContentField = document.getElementById("content-form-step");
    const stepContentError = document.getElementById("content-error-step");

    // Reset error message
    stepContentError.textContent = "";

    let isValid = true;

    // Validate step content (must not be empty)
    const stepContentValue = stepContentField.value.trim();
    if (stepContentValue === "") {
      stepContentError.textContent = "Please enter step content.";
      isValid = false;
    }

    return isValid;
  }

  function validateStorageForm() {
    const storageContentField = document.getElementById("content-form-storage");
    const storageContentError = document.getElementById("content-error-storage");

    // Reset error message
    storageContentError.textContent = "";

    let isValid = true;

    // Validate storage info content (must not be empty)
    const storageContentValue = storageContentField.value.trim();
    if (storageContentValue === "") {
      storageContentError.textContent = "Please enter storage info content.";
      isValid = false;
    }

    return isValid;
  }

  function validateEquipmentForm() {
        const equipmentContentField = document.getElementById("content-form-equipment");
        const equipmentContentError = document.getElementById("content-error-equipment");

        // Reset error message
        equipmentContentError.textContent = "";

        let isValid = true;

        // Validate equipment content (must not be empty)
        const equipmentContentValue = equipmentContentField.value.trim();
        if (equipmentContentValue === "") {
        equipmentContentError.textContent = "Please enter an equipment item name.";
        isValid = false;
        }

        return isValid;
    }

  function validateNoteForm() {
        const noteContentField = document.getElementById("content-form-note");
        const noteContentError = document.getElementById("content-error-note");

        // Reset error message
        noteContentError.textContent = "";

        let isValid = true;

        // Validate note content (must not be empty)
        const noteContentValue = noteContentField.value.trim();
        if (noteContentValue === "") {
        noteContentError.textContent = "Please enter note content.";
        isValid = false;
        }

        return isValid;
    }

    function validateFreezerForm() {
        const freezerContentField = document.getElementById("content-form-freezer");
        const freezerContentError = document.getElementById("content-error-freezer");

        // Reset error message
        freezerContentError.textContent = "";

        let isValid = true;

        // Validate freezing info content (must not be empty)
        const freezerContentValue = freezerContentField.value.trim();
        if (freezerContentValue === "") {
        freezerContentError.textContent = "Please enter freezing info content.";
        isValid = false;
        }

        return isValid;
    }
    
  function replaceEditButtons() {
    var originalButton = document.getElementById("editOriginalButton");
    var newButtons = document.getElementById("editNewButtons");
    
    originalButton.classList.add("hidden");
    newButtons.classList.remove("hidden");
  }
  
  function restoreEditButton() {
    var originalButton = document.getElementById("editOriginalButton");
    var newButtons = document.getElementById("editNewButtons");
    
    originalButton.classList.remove("hidden");
    newButtons.classList.add("hidden");
  }
  
  function replaceDeleteButtons() {
    var originalButton = document.getElementById("deleteOriginalButton");
    var newButtons = document.getElementById("deleteNewButtons");
    
    originalButton.classList.add("hidden");
    newButtons.classList.remove("hidden");
  }
  
  function restoreDeleteButton() {
    var originalButton = document.getElementById("deleteOriginalButton");
    var newButtons = document.getElementById("deleteNewButtons");
    
    originalButton.classList.remove("hidden");
    newButtons.classList.add("hidden");
  }
  
  function replaceAndToggleEditButtons() {
    replaceEditButtons();
    toggleEditState();
  }
  
  function restoreAndToggleEditButton() {
    restoreEditButton();
    toggleEditState();
  }

  function setEditState(editState) {
    // Save edit state for the current recipe in localStorage
    const recipeId = '<%= recipe._id %>'; // Make sure this is dynamically set by your server-side template
    localStorage.setItem(`editState_${recipeId}`, editState);
  }

  function getEditState() {
    const recipeId = '<%= recipe._id %>'; // Dynamically set as above
    return localStorage.getItem(`editState_${recipeId}`) === 'true';
  }

  function toggleEditState() {
    const currentEditState = getEditState();
    setEditState(!currentEditState);

    const editButtons = document.querySelectorAll('.list-edit-button, .x-form, .input-div');
    if (currentEditState) {
        editButtons.forEach(button => button.style.display = 'none');
    } else {
        editButtons.forEach(button => button.style.display = 'block');
    }
}

  function initializeEditState() {
    const editState = getEditState();

    const editButtons = document.querySelectorAll('.list-edit-button, .x-form, .input-div');
    if (editState) {
        editButtons.forEach(button => button.style.display = 'block');
    } else {
        editButtons.forEach(button => button.style.display = 'none');
    }

    // Set the correct visibility of the edit and delete button groups
    const editOriginalButton = document.getElementById("editOriginalButton");
    const editNewButtons = document.getElementById("editNewButtons");

    if (editState) {
        editOriginalButton.classList.add("hidden");
        editNewButtons.classList.remove("hidden");
    } else {
        editOriginalButton.classList.remove("hidden");
        editNewButtons.classList.add("hidden");
    }
  }

  // Function to save the scroll position for the current recipe page
  function saveScrollPosition(recipeId) {
    const scrollPosition = window.scrollY;
    sessionStorage.setItem(`recipeScrollPosition_${recipeId}`, scrollPosition);
  }

  // Function to retrieve and set the saved scroll position
  function setScrollPosition(recipeId) {
    const scrollPosition = sessionStorage.getItem(`recipeScrollPosition_${recipeId}`);
    if (scrollPosition) {
      window.scrollTo(0, scrollPosition);
    }
  }

  // Get the current recipe's ID from your template (replace 'recipeId' with the actual variable)
  const currentRecipeId = '<%= recipe._id %>'; 

  // Save the scroll position when the page unloads
  window.addEventListener('beforeunload', () => saveScrollPosition(currentRecipeId));

  // Set the scroll position when the page loads
  window.addEventListener('load', () => setScrollPosition(currentRecipeId));
  
  window.addEventListener('load', function() {
    initializeEditState();
    initializeServingsInput();
  });

  document.addEventListener("DOMContentLoaded", function() {
    updateIngredientQuantities(); // Initial call to set quantities
  });

</script>

<%- include('../partials/footer') %>